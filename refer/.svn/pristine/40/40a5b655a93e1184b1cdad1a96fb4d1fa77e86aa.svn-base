<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:aop="http://www.springframework.org/schema/aop"
       xmlns:context="http://www.springframework.org/schema/context"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans-4.3.xsd
	http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.3.xsd
	http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.3.xsd
	http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.3.xsd">

    <context:component-scan base-package="refer.dao"/>
    <context:component-scan base-package="refer.service"/>

    <bean class="org.springframework.beans.factory.annotation.AutowiredAnnotationBeanPostProcessor"/>

    <context:property-placeholder location="classpath:c3p0.properties"/>

    <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
          destroy-method="close">
        <property name="user" value="${user}" />
        <property name="password" value="${password}" />
        <property name="driverClass" value="${driverClass}"/>
        <property name="jdbcUrl" value="${jdbcUrl}"/>

        <!--连接池中保留的最小连接数。-->
        <property name="minPoolSize" value="${minPoolSize}"/>

        <!--连接池中保留的最大连接数。Default: 15 -->
        <property name="maxPoolSize" value="${maxPoolSize}"/>

        <!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
        <property name="initialPoolSize" value="${initialPoolSize}"/>

        <!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
        <property name="maxIdleTime" value="${maxIdleTime}"/>

        <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
        <property name="acquireIncrement" value="${acquireIncrement}"/>

        <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements
            属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。
            如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 0-->
        <property name="maxStatements" value="${maxStatements}"/>

        <!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
        <property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}"/>

        <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
        <property name="acquireRetryAttempts" value="${acquireRetryAttempts}"/>

        <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效
            保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试
            获取连接失败后该数据源将申明已断开并永久关闭。Default: false-->
        <property name="breakAfterAcquireFailure" value="${breakAfterAcquireFailure}"/>
        <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的
            时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable
            等方法来提升连接测试的性能。Default: false -->
        <property name="testConnectionOnCheckout" value="${testConnectionOnCheckout}"/>
    </bean>

    <bean id="sessionFactory"
          class="org.springframework.orm.hibernate5.LocalSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <property name="hibernateProperties">
            <props>
                <!-- 指定数据库方言 -->
                <prop key="hibernate.dialect">
                    org.hibernate.dialect.MySQL5InnoDBDialect</prop>
                <!-- 是否根据需要每次自动创建数据库 -->
                <prop key="hibernate.hbm2ddl.auto">validate</prop>
                <!-- 显示Hibernate持久化操作所生成的SQL -->
                <prop key="hibernate.show_sql">false</prop>
                <!-- 将SQL脚本进行格式化后再输出 -->
                <prop key="hibernate.format_sql">true</prop>
                <!-- <prop key="hibernate.cache.provider_class">
                    org.hibernate.cache.EHCacheProvider
                    </prop>  -->
            </props>
        </property>
        <!-- 映射目录位置集(不需要指定每个映射文件)
            <property name="mappingResources">
            <list>
            <value>classpath:/topsearch/model/po</value>
            </list>
            </property>-->
<!--         <property name="mappingLocations">
            <list>
               <value>classpath:refer/model/po/Paper.hbm.xml</value>
            </list>
        </property>-->
        <property name="mappingLocations">
            <value>${mappingLocation}</value>
        </property>
    </bean>

    <bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!-- ###############定义了事物管理（若报异常，请删除以下代码）############## -->

    <!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
    <!-- 该类实现PlatformTransactionManager接口，是针对Hibernate的特定实现-->
    <bean id="transactionManager" class=
            "org.springframework.orm.hibernate5.HibernateTransactionManager">
        <!-- 配置HibernateTransactionManager时需要依注入SessionFactory的引用 -->
        <property name="sessionFactory" ref="sessionFactory"/>
    </bean>
    <!-- 配置事务切面Bean,指定事务管理器 -->
    <tx:advice id="txAdvice" transaction-manager="transactionManager">
        <!-- 用于配置详细的事务语义 -->
        <tx:attributes>
            <!-- 所有以'get'开头的方法是read-only的 -->
            <tx:method name="read_*" read-only="true"/>
            <tx:method name="list*" read-only="true"/>
            <!-- 其他方法使用默认的事务设置 -->
            <tx:method name="*"/>
        </tx:attributes>
    </tx:advice>
    <aop:config>
        <!-- 配置一个切入点，匹配service包下
            所有以Impl结尾的类的所有方法的执行 -->
        <aop:pointcut id="Pointcut"
                      expression=
                              "execution(* *.service..*.*(..))"/>
        <!-- 指定在txAdvice切入点应用txAdvice事务切面 -->
        <aop:advisor advice-ref="txAdvice"
                     pointcut-ref="Pointcut"/>
    </aop:config>
    <!-- ######################事务end############################## -->

</beans>